name: Production CD

on:
  push:
    tags:
      - deploy**

jobs:
  api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VOTEAIRE_PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VOTEAIRE_PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images to Amazon ECR
        id: build-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/api.Dockerfile -t $ECR_REGISTRY/voteaire-api:$IMAGE_TAG .
          docker push $ECR_REGISTRY/voteaire-api:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/voteaire-api:$IMAGE_TAG"

      - name: Render api task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/prod/task-definition-api.json
          image: ${{ steps.build-images.outputs.image }}
          container-name: api

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: voteaire-api-service
          cluster: voteaire
          codedeploy-appspec: aws/prod/appspec.json
          codedeploy-application: AppECS-voteaire-voteaire-api-service
          codedeploy-deployment-group: DgpECS-voteaire-voteaire-api-service
          force-new-deployment: true
  chain-worker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VOTEAIRE_PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VOTEAIRE_PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images to Amazon ECR
        id: build-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/chain.Dockerfile -t $ECR_REGISTRY/voteaire-chain-worker:$IMAGE_TAG .
          docker push $ECR_REGISTRY/voteaire-chain-worker:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/voteaire-chain-worker:$IMAGE_TAG"

      - name: Render api task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/prod/task-definition-chain-worker.json
          image: ${{ steps.build-images.outputs.image }}
          container-name: worker

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: voteaire-chain-worker
          cluster: voteaire
  weight-worker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VOTEAIRE_PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VOTEAIRE_PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images to Amazon ECR
        id: build-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f docker/weight.Dockerfile -t $ECR_REGISTRY/voteaire-weight-worker:$IMAGE_TAG .
          docker push $ECR_REGISTRY/voteaire-weight-worker:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/voteaire-weight-worker:$IMAGE_TAG"

      - name: Render api task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: aws/prod/task-definition-weight-worker.json
          image: ${{ steps.build-images.outputs.image }}
          container-name: voteaire-weight-worker

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: voteaire-weight-worker
          cluster: voteaire
